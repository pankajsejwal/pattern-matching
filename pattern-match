
load(basic);

/*---------------------------------------------------------------------------*/
load("C:\\Users\\joker\\Documents\\Maxima-Docs\\segment-new.lisp")$
/* Get segment from http://www.cs.berkeley.edu/~fateman/lisp/segment-new.lisp    */

use_segment(true);
/*---------------------------------------------------------------------------*/
listcomplementt(k,l,[n]):=block([],if(n=[]) then map(lambda([x],k:delete(x,k)),[l]) else map(lambda([x],k:delete(x,k,n)),[l]),k)$

listcomplement(k,l,[n]):=block([temp:l,s:k],if(n=[]) then for i in temp do s:listcomplementt(s,i) else for i in temp do s:listcomplementt(s,i,n),s)$

take(x,m,n):=block([temp:[]],part(x,makelist(i,i,m,n)))$

init(lis):=block([lis:lis],take(lis,1,length(lis)-1))$
/*---------------------------------------------------------------------------*/

prefix_p(seq1,seq2):=block(if(slength(string(seq1))<= slength(string(seq2)))
    then if(seq1="___") then (is(part(charlist(seq1),[1,3])=part(charlist(seq2),[1,3])))
     elseif(seq1="__") then 
      (is(part(charlist(seq2),[1,2])=["_","_"]) and (if(slength(string(seq2))>2) then part(charlist(seq2),[3])#["_"]))
     elseif(seq1="_") then is(first(charlist(seq2))="_") and (if(slength(string(seq2))>=2) then part(charlist(seq2),[2])#["_"]))$

/*---------------------------------------------------------------------------*/

getsymbol_name(sym):=substring(symbol_name(sym),2)$

:lisp(defun $symbol_name(sym)(symbol-name sym))

/*---------------------------------------------------------------------------*/

propagate(pop1_stack1,pat,item):=block([final,pop_temp,pop_return:[],pop1_stack1:reverse(pop1_stack1),loc1_t,pat:pat,item:item],
if(length(pop1_stack1)>1) then 
       (loc1_t:copylist(first(init(pop1_stack1))),
  for i:1 thru length(pop1_stack1)-1 do 
      pop1_stack1[i][2]:[last(last(pop1_stack1[i+1]))] , 
  pop_return:append(reverse(pop1_stack1),pop_return),
  pop_return:append(pop_return,[[pat[item],[last(last(loc1_t))]]]),
  pop_return:substinpart(piece:[first(piece),second(piece),init(last(piece))],pop_return,1),
  final:pop_return)
else
(  pop_temp:pop(pop1_stack1),
   if(length(last(pop_temp))>1) then 
            (push([pat[item],[last(last(pop_temp))]],pop_return),
             push(append(init(pop_temp),[init(last(pop_temp))]),pop_return),
            final:pop_return)
   else (push([pat[item],last(pop_temp)],pop_return),
         push(append(init(pop_temp)),pop_return),
         final:pop_return)),
(final))$
/*---------------------------------------------------------------------------*/

propagate2(pop1_stack1,pat,item):=block([atom_type,all_lasts:[],last_lis_col:[],coll_rest,final,pop_temp,pop_return:[],pop1_stack1:pop1_stack1,
                            loc1_t,pat:pat,item:item,last_lis,temp1],
if(length(sublist(first(pop1_stack1),listp))>1) then atom_type:false else atom_type:true,
if(atom_type) then pop1_stack1:map(lambda([x],[first(x),rest(x)]),pop1_stack1),
all_lasts:flatten(map(last,rest(pop1_stack1))),
pop1_stack1:substinpart(piece:flatten(cons(piece,all_lasts)),pop1_stack1,1,3),
last_lis_col:[],
if(length(pop1_stack1)>1) then 
       (loc1_t:copylist(first((pop1_stack1))),
for i:2 thru length(pop1_stack1) do  pop1_stack1[i][2]:[last(loc1_t)[i-1]],  
col_rest:listcomplement(last(loc1_t),flatten(map(last,rest(pop1_stack1)))),
pop1_stack1:substinpart(piece:[],pop1_stack1,1,3),
pop_return:append(pop_return,[[pat[item],[first(col_rest)],rest(col_rest)]]),
pop_return:append(pop1_stack1,pop_return),
final:pop_return)

else
(  
   pop_temp:pop(pop1_stack1),
   push([pat[item],[first(last(pop_temp))],rest(last(pop_temp))],pop_return),
   push([first(pop_temp),second(pop_temp)],pop_return),
   final:pop_return),final)$
/*---------------------------------------------------------------------------*/

propagate_3(pop1_stack1,pat,item):=block([last_lis_col:[],last_lis_col3:[],help_col3:[],final,pop_temp,pop_return:[],
           pop1_stack1:pop1_stack1,loc1_t,pat:pat,item:item,last_lis,temp1],
if(length(pop1_stack1)>1) then
       (loc1_t:copylist(first(init(pop1_stack1))),
       last_lis:(map(last,pop1_stack1)),
  for item in reverse(last_lis) do last_lis_col:append(item,last_lis_col),
  for i:2 thru length(pop1_stack1) do 
      if(atom(last_lis_col[i-1])=false and length(last_lis_col[i-1])=1) then pop1_stack1[i][2]:last(last_lis_col[i-1]) else
               pop1_stack1[i][2]:[(last_lis_col[i-1])], 
  pop_return:append([first(loc1_t),second(loc1_t)],pop_return),
  pop_return:append(reverse(rest(pop1_stack1)),[pop_return]), 
  for item in (map(last,(pop_return))) do
         last_lis_col3:append(last_lis_col3,[apply(segment,item)]),
for item in reverse(last_lis_col3) do if(atom(item)) then help_col3:append([item],help_col3) else help_col3:append(item,help_col3),
  temp1:listcomplement(last_lis_col,help_col3),
  pop_return:append(pop_return,[[pat[item],[],(temp1)]]),
  final:pop_return)
else

(  pop_temp:pop(pop1_stack1),
   push([pat[item],[],(last(pop_temp))],pop_return),
   push([first(pop_temp),second(pop_temp)],pop_return),
   final:pop_return),final)$
/*---------------------------------------------------------------------------*/

disect(pat,input):=block([chk_patt,inp_map,pat:pat,temp_container:[],pat_subl,temp:[],loc1,loc2,loc3,container,loc1_t,contain1,
                   loc2_t,loc1_t1,loc1_t2,pop1,pop1_stack:[],pop1_stack1:[]],
chk_patt:sublist_indices(pat,lambda([x],prefix_p("_",getsymbol_name(x)) or prefix_p("__",getsymbol_name(x)))),
if(length(chk_patt)<=length(input)) then (
pat:cons(___pivot,pat),
     inp_map:reverse(generate_mappings(input)),
     input:map(last,inp_map),
    container:sublist_indices(pat,lambda([x],prefix_p("_",getsymbol_name(x)))),
    container1:sublist_indices(pat,lambda([x],prefix_p("__",getsymbol_name(x)) or prefix_p("___",getsymbol_name(x)))),
    if(container#[] and container1=[] and last(container)=length(input)) then (
       (for i:1 thru length(input) do temp:append(temp,[[pat[i],input[i]]])))
else (  
for item:1 thru length(pat) do
if(prefix_p("_",getsymbol_name(pat[item]))) then
(    
       ( container:sublist_indices(pat,lambda([x],prefix_p("_",getsymbol_name(x)))),
              container:last(container),
         contain1:sublist_indices(pat,lambda([x],prefix_p("__",getsymbol_name(x)) or prefix_p("___",getsymbol_name(x)))),
            if(length(input)=container+1 and contain1=[] ) then 
              (for i:1 thru length(input) do temp:append(temp,[[pat[i],input[i]]]))
            else (  
              pat_subl:take(pat,1,item-1),
              container:sublist_indices(pat_subl,lambda([x],prefix_p("__",getsymbol_name(x))or 
                         prefix_p("___",getsymbol_name(x)))),
         if(container#[]) then (container:last(container),
           pop1_stack1:[],
           loc1_t:sublist_indices(temp,lambda([x],prefix_p("__",getsymbol_name(first(x)))or 
                  prefix_p("___",getsymbol_name(first(x))))),
           pop1_stack1:take(temp,last(loc1_t),length(temp)),
           temp:take(temp,1,last(loc1_t-1)),   
           pop1_stack1:propagate(pop1_stack1,pat,item), 
           temp:append(temp,(pop1_stack1)))
    ) ))

elseif(prefix_p("__",getsymbol_name(pat[item]))) then
   (if(item=1) then
              push([pat[item],[first(input)],rest(input)],temp)
   else ( 
          pat_subl:take(pat,1,item-1),
          container:sublist_indices(pat_subl,lambda([x],prefix_p("__",getsymbol_name(x))or prefix_p("___",getsymbol_name(x)))),
          if(container#[]) then ( 
                           container:last(container),
                           pop1_stack1:[],
                           temp:sublist(temp,lambda([x],x#[parse_string("___pivot"),[]])),
                           loc2_t:sublist_indices(temp,lambda([x],prefix_p("__",getsymbol_name(first(x)))or 
                                   prefix_p("___",getsymbol_name(first(x))))),
                           pop1_stack1:take(temp,last(loc2_t),length(temp)),
                           temp:take(temp,1,last(loc2_t-1)),
                           pop1_stack1:propagate2(pop1_stack1,pat,item),
                           pop1_stack1:sublist(pop1_stack1,lambda([x],x#[parse_string("___pivot"),[]])),
                           temp:append(temp,pop1_stack1))

          else (loc2_t:pop(temp),
                push([first(loc2_t),second(loc2_t)],temp),
                temp:append(temp,[[pat[item],[first(last(loc2_t))],rest(last(loc2_t))]]))
))

elseif(prefix_p("___",getsymbol_name(pat[item]))) then
   if(item=1) then
          push([pat[item],[],input],temp)
   else ( 
          pat_subl:take(pat,1,item-1),
          container:sublist_indices(pat_subl,lambda([x],prefix_p("__",getsymbol_name(x))or prefix_p("___",getsymbol_name(x)))),
          if(container#[]) then ( 
                           container:last(container),
                           pop1_stack1:[],
                           temp:sublist(temp,lambda([x],x#[parse_string("___pivot"),[]])),
                           loc2_t:sublist_indices(temp,lambda([x],prefix_p("__",getsymbol_name(first(x)))or 
                                   prefix_p("___",getsymbol_name(first(x))))),
                           pop1_stack1:take(temp,last(loc2_t),length(temp)),
                           temp:take(temp,1,last(loc2_t-1)),
                           pop1_stack1:propagate_3(pop1_stack1,pat,item), 
                           temp:append(temp,(pop1_stack1)))
          else (loc2_t:pop(temp),
                push([first(loc2_t),second(loc2_t)],temp),
                temp:append(temp,[[pat[item],[],(last(loc2_t))]]))
)),
 pop1_stack1:revert_mappings(inp_map,input), 
 for item in pop1_stack1 do temp:subst(last(item),first(item),temp),
 if length(temp)+1>= length(pat) then temp:temp else temp:[]
),temp )$

/*---------------------------------------------------------------------------*/
flatend(temp):=sublist(map(lambda([x],if(length(x)>2) then 
               [first(x),append(second(x),(last(x)))] else x),temp),lambda([x],first(x)#parse_string("___pivot")))$

/*---------------------------------------------------------------------------*/
arrange(pat,temp):=block([final:[],pat:rest(pat)],for item in pat do if(item#[]) then
                  (push(first(sublist(temp,lambda([x],first(x)=item))),final),temp:delete(item,temp)),(reverse(final)))$

/*---------------------------------------------------------------------------*/
generate_mappings(lis):=block([temp:[]],for item in lis do push([item,gensym()],temp),temp)$
/*---------------------------------------------------------------------------*/

revert_mappings(lis,inp):=block([temp:[],col_sym:[]],col_sym:map(first,lis), 
                         for item:1 thru length(input) do push([input[item],col_sym[item]],temp),temp)$
/*---------------------------------------------------------------------------*/

pat_lists(patt,input):=block([out:[],final:[],symb,patt_temp1,patt_temp2,patt_sym:[],inpt_sym:[],
        inpt_temp1,inpt_temp2,patt_st1:[],patt:patt,input:input,lis_pat,temp1,temp2],
        lis_pat:sublist(patt,listp),
        if length(lis_pat)=0 then disect(patt,input)
        else (  patt_temp1:enum_positions(patt),
                patt_temp1:reverse(sublist(patt_temp1,lambda([x],atom(first(x))=false))),
                patt_temp2:sublist(patt_temp1,lambda([x],test_subl(x))), 
                patt_temp2:map(first,patt_temp2),
                for i in patt_temp2 do 
                for item:1 thru length(i) do 
                     if(atom(i[item])=false) then (symb:parse_string(concat("_",gensym())),
                         push([i[item],symb],patt_sym)),
                for item in patt_sym do patt_temp2:subst(last(item),first(item),patt_temp2),         

                inpt_temp1:enum_positions(input),
                inpt_temp1:reverse(sublist(inpt_temp1,lambda([x],atom(first(x))=false))),
                inpt_temp2:sublist(inpt_temp1,lambda([x],test_subl(x))),
                inpt_temp2:map(first,inpt_temp2),
                for i in inpt_temp2 do 
                for item:1 thru length(i) do 
                     if(atom(i[item])=false) then (symb:gensym(),push([i[item],symb],inpt_sym)),
                for item in inpt_sym do inpt_temp2:subst(last(item),first(item),inpt_temp2),
                patt_sym:reverse(patt_sym),inpt_sym:reverse(inpt_sym),
                if(sort(map(last,patt_temp1))=sort(map(last,inpt_temp1)))
                then (
                     for item:1 thru length(patt_sym) do (   
                                 push(disect(first(patt_sym[item]),first(inpt_sym[item])),final)),
                     for item:1 thru length(patt_temp2) do (  
                                 push(disect(patt_temp2[item],inpt_temp2[item]),final)),
                     for item in inpt_sym do inpt_temp2:subst(first(item),last(item),inpt_temp2))           
),

for item in patt_sym do final:subst(first(item),last(item),final),
for item in inpt_sym do final:subst(first(item),last(item),final),

for item:1 thru length(patt) do if(listp(patt[item])) then (
                symb:parse_string(concat("_",gensym())),push([patt[item],symb],patt_sym),patt[item]:symb),
/*print("patt_sym:",patt_sym,"inpt_sym:",inpt_sym),   */
push(disect(patt,input),final),
for item in patt_sym do final:subst(first(item),last(item),final),
for item in final do out:append(item,out),out:sublist(out,lambda([x],atom(first(x)))),out)$

/*-----usage------
ss:pat_lists([_a,_b,[_c,[_d,__e],_q],[_c1,[_d1,_e1,_f1,_w1]]],[A,B,[C,[D,E,F,G],Q],[C1,[D1,E1,F1,G1]]]);
[[_d1,[D1]],[_e1,[E1]],[_f1,[F1]],[_w1,[G1]],[_d,[D]],[__e,[E,F,G]],[_c1,[C1]],[_c,[C]],[_q,[Q]],[_a,[A]],[_b,[B]]] --*/
/*----------------------------------------------------------------------------------------*/

/* To get rid of last of every sublist as sublist */

mapss(ss):=block([temp:[],symb],for item in ss do (symb:gensym(),(push([first(item),symb:apply(segment,(last(item)))],temp))),temp)$

/*-----usage------
kk:mapss(ss);
[[_b,B],[_a,A],[_q,Q],[_c,C],[_c1,C1],[__e,E,F,G],[_d,D],[_w1,G1],[_f1,F1],[_e1,E1],[_d1,D1]]  -----*/
/*----------------------------------------------------------------------------------------*/

/*To reformat the list after obtaining patterns from them,*/
repl(kk,lis):=block([lis:copylist(lis),rep:[],pat_map:[],sym,symb],for item:1 thru length(kk) do 
         (sym:gensym(),symb:apply(segment,last(kk[item])),
                  lis:repl_inl(lis,first(kk[item]))),
              for item in kk do lis:subst(last(item)[1],first(item),lis),lis)$
			  
repl_inl(lis,pref):=block([lis:lis],if(listp(lis)) then 
                    (for item:1 thru length(lis) do 
                      if(listp(lis[item])) then repl_inl(lis[item],pref) else if(lis[item]=pref) then (lis[item]:symb))
                      else (if(atom(lis)) then if(lis=pref) then lis:symb),ev(lis))$

/*-----usage------
lis:[_a,[_c^2,[__e,__e],_q+3],[_c1,[_d1*10,_e1^_e1],_a],__e]; /* new format we want from previous list	*/
repl(ss,lis); => [A,[C^2,[E,F,G,E,F,G],Q+3],[C1,[10*D1,E1^E1],A],E,F,G]	----*/		  
/*----------------------------------------------------------------------------------------*/


